* Processes

** Test No Process
*** NoProcessNoLabel
- dummy algorithm with NO processes and No label
- should produce the same code with distpcal flag or not - OK
*** NoProcessOneLabel
- dummy algorithm with NO processes and ONE label
- should produce the same code with distpcal flag or not - OK
*** NoProcessTwoLabels
- dummy algorithm with NO processes and TWO labels
- should produce the same code with distpcal flag or not - OK
*** NoProcessNoLabelMacro
- dummy algorithm with NO processes and a macro
- should produce the same code with distpcal flag or not - OK


** Test One Process
*** OneProcessOneThread (C & P)
- dummy algorithm with ONE process
- uses local variable
- should produce the same code (except for pc) with distpcal flag or not - OK
*** OneProcessOneThreadStringId (C & P)
- as OneProcessOneThread but use string identifiers for processes
- generates two labels
*** OneProcessOneThreadLVandLabelsC.tla (C & P)
- as OneProcessOneThread but with explicit labels and process id in set



*** OneProcessMultiThread (C & P)
- one process with multiple threads
- process id explicit (not in set)
- C or P
*** OneProcessMultiThreadLocalVar (C & P)
- as OneProcessMultiThread but with a local variable to the process
*** OneProcessSetMultiThread (C & P)
- one process definition
- process ids from Set 
*** OneProcessSetMultiThreadXalt (C & P)
- same as OneProcessSetMultiThread but the set of Nodes is a parameter
  (for tests)
*** OneProcessEmptyThreadP (P)
- dummy algorithm with ONE processes with EMPTY body
- only possible with P syntax (?)
- should produce the same code with distpcal flag or not - OK
- doesn't parse in Toolbox


** Test Several Processes

*** NProcessesNoLabelNoPc (C+P)
- 3 processes (2 with IN, 1 with =) with no threads
- each process is a WHILE TRUE => no need for PC

*** NProcesses2ThreadsNoPc (C+P)
- 3 processes (2 with IN, 1 with =), each with 2 threads
- 2 of the processes are fair
- each process is a WHILE TRUE => no need for PC
- check WF statements

*** NProcesses2Threads (C+P)
- 3 processes (2 with IN, 1 with =), each with 2 threads
- 2 of the processes are fair
- check WF statements

*** Processes2p1tPvarClash
- two processes, id fixed and id in set
- try to create a clash between declared variables and generated
  (normally fresh) variable
- should produce the same code (except for pc,stack) with distpcal flag or not - OK


** Test Procedures with Processes

*** Procedures0p
- no process
- should produce the same code with distpcal flag or not - OK
*** Procedures1p1t
- one process, id fixed
- should produce the same code (except for pc,stack) with distpcal flag or not - OK
*** Procedures1p1tRec
- one process, id fixed
- recursive procedure
- should produce the same code (except for pc,stack) with distpcal flag or not - OK
*** Procedures2p1t
- two processes, id fixed and id in set
- should produce the same code (except for pc,stack) with distpcal flag or not - OK
*** Procedures2p1talt
- same as Procedures2p1t but local variables in processes have same names 
*** Procedures1p2t
- one process, two threads, id fixed
- should produce the same code (except for pc,stack) with distpcal flag or not - OK




